angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("index.html","<!DOCTYPE html><html ng-cloak><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title ng-bind=\"pageTitle\"></title><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/css/materialize.min.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"bundle.css\"><link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"><base href=\"/\"></head><body><div ui-view></div><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js\"></script><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js\"></script><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-animate.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.18/angular-ui-router.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js\"></script><script src=\"bundle.js\"></script></body></html>");
$templateCache.put("dashboard/dashboard.component.html","<doc-section><div class=\"row\"><doc-header id=\"home\">Welcome</doc-header><doc-caption>Documentation with standard UI written in HTML/SASS</doc-caption><p>project-docs is a platform to develop and store documentation for common libraries, projects and tools where the common README may not be sufficent.</p><p>project-docs provides a standard UI to improve ease of use and readability, tools to shorten the documentation process and help develop documentation standards.</p><p>All documentation is written in common HTML & SASS, no new rules or markdown to learn.</p><p>Functionality includes helper components, responsive CSS framework, automatic side-navigation and syntax highlighted code examples.</p><p>Inspired by other more robust documentation UI\'s:</p><ul><li><a href=\"https://stripe.com/docs/api#intro\" target=\"_blank\">Stripe API</a></li><li><a href=\"https://angular.io/docs/ts/latest/\" target=\"_blank\">AngularJS</a></li><li><a href=\"http://underscorejs.org/\" target=\"_blank\">Underscore</a></li><li><a href=\"https://developers.google.com/maps/documentation/javascript/tutorial\" target=\"_blank\">Google Maps</a></li></ul></div></doc-section><doc-section><doc-header id=\"projects\">Projects</doc-header><doc-caption>Explore the project documentation library.</doc-caption><div class=\"row\"><div ng-repeat=\"project in $ctrl.projects\" class=\"col s3 m3 l3\"><project name=\"{{ project.name }}\" description=\"{{ project.description }}\" color=\"{{ project.color }}\"></project></div></div></doc-section>");
$templateCache.put("layout/app-layout.html","<div id=\"right-panel\" class=\"right-panel\"><app-header></app-header><div ui-view class=\"container-fluid\"></div><footer class=\"page-footer grey darken-3 z-depth-2\"><div class=\"container\"><div class=\"row\"><div class=\"col l4 s12\"><h5 class=\"white-text\">The End.</h5><p class=\"grey-text text-lighten-4\">To contribute to this document, find the document in <a href=\"https://github.com/KitHensel/project-docs\" target=\"_blank\">project-docs</a> and make a commit.</p></div><div class=\"col l4 offset-l2 s12\"><h5 class=\"white-text\">Resources</h5><ul><li><a class=\"grey-text text-lighten-3\" href=\"https://github.com/orgs/AdvantageIntegratedSolutions/dashboard\" target=\"_blank\">Advantage GitHub</a></li><li><a class=\"grey-text text-lighten-3\" href=\"https://docs.angularjs.org/guide\" target=\"_blank\">Angular Docs</a></li><li><a class=\"grey-text text-lighten-3\" href=\"http://materializecss.com/\" target=\"_blank\">Materialize</a></li></ul></div><div class=\"col l2\"><img ng-src=\"https://s3.amazonaws.com/advantage_assets/logo.png\"></div></div></div><div class=\"footer-copyright grey darken-4\"><div class=\"container center-align\">Â© 2016 Advantage Integrated Solutions</div></div><div id=\"scrollToTop\" ng-hide=\"atTop\" ng-click=\"scrollToTop()\"><i class=\"material-icons\">keyboard_arrow_up</i></div></footer></div><side-nav headings=\"headings\"></side-nav>");
$templateCache.put("layout/header.component.html","<nav class=\"grey darken-3\"><div class=\"nav-wrapper\"><a href=\"/\"><img ng-src=\"https://s3.amazonaws.com/advantage_assets/logo.png\"> </a><a href=\"#\" class=\"brand-logo\"></a><ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\" ng-if=\"!$root.home\"><li><a href=\"/\">Home</a></li></ul></div></nav>");
$templateCache.put("side-nav/side-nav.component.html","<div id=\"side-nav-header\" class=\"grey darken-3 white-text\"><h5 class=\"title\">{{ $root.title }}</h5></div><ul id=\"slide-out\" class=\"side-nav fixed\" ng-if=\"$ctrl.show\"><div id=\"side-nav-headings\"><side-nav-item ng-repeat=\"nav in $root.sideNavs\" data=\"nav\"></side-nav-item></div></ul>");
$templateCache.put("dashboard/projects/projects.component.html","<div class=\"project-item\"><a href=\"/{{ $ctrl.name }}\"><div class=\"card z-depth-1 {{ $ctrl.color }}\" ng-class=\"{\'z-depth-4\': hover}\" ng-mouseenter=\"hover = true\" ng-mouseleave=\"hover = false\"><div class=\"card-content white-text\"><span class=\"card-title\">{{ $ctrl.name }}</span><p>{{ $ctrl.description }}</p></div></div></a></div>");
$templateCache.put("docs/base-js/index.doc.html","<section><div ng-include src=\"\'introduction.section.html\'\"></div><doc-section><doc-header id=\"quickstart\">Quickstart</doc-header><p>Utilizing base-js first requires a useable QuickBase application. Once you have an application, you will need to collect the database and table settings. base-js bootstraps these configurations to create a more-powerful, more object-oriented design.</p><p>Please the exact configuration needed please see below @ <a href=\"#settings\">Settings</a></p><pre>\n      <code class=\"language-javascript\">\n        const config = {\n          token: \"cgfsmfcdc5vyp5k5s7h6b6v3m9v\", //apptoken\n          async: \"promise\",\n          databaseId: \"bjbsgxy2r\", //main application dbid\n          tables: {\n            toys: {\n              dbid: \"bjbsgxy3t\", //table id\n              rid: 3, //field id\n              name: 6,\n              type: 8,\n              description: 9,\n              voicedBy: 10,\n              primary: 11\n            }\n          }\n        };\n\n        const db = new Base(config);\n\n        //retrieve all primary toy records\n        db.toys.doQuery({ primary: \"1\" }, { slist: [6,9] }).then(function(toys){\n          /*\n            toys => [\n              { name: \"Buzz Lightyear\", description: \"Space-ranger action figure who wears a space suit.\" },\n              { name: \"Woody\", description: \"Cowbody doll, Andy\'s favorite.\" },\n              { name: \"Jesse\", description: \"Cowgirl doll and part of the Woody\'s Round Up gang.\" }\n            ]\n          */\n        });\n\n        //add new toy record\n        let toy = { \n          name: \"Hamm\", \n          description: \"Wisecracking realist piggy bank.\", \n          voicedBy: \"John Ratzenberger\" \n        };\n\n        db.toys.addRecord(toy).then(function(newRecordId){\n          //newRecordId => 10001\n        });\n\n        //delete toy record\n        db.toys.delete(10001).then(function(deleted){\n          //deleted => true\n        });        \n\n        //import collection of toys\n        let toys = [\n          { name: \"Rex\", description: \"Excitable large, green, plastic Tyrannosaurus rex.\", voicedBy: \"Wallace Shawn\" },\n          { name: \"Slinky Dog\", description: \"Dachshund w/ slinky for body, speaks with a southern accent.\", voicedBy: \"Jim Varney\" },\n          { name: \"Mr. Potato Head\", description: \"Doll based on the real-life toy by Playskool.\", voicedBy: \"Don Rickles.\" },\n          { name: \"Bullseye\", description: \"Woody\'s horse that acts like a dog.\", voicedBy: \"\" },\n          { name: \"Bo Peep\", description: \"Porcelain figurine attached to Molly\'s bedside lamp.\", voicedBy: \"Annie Potts\" },\n        ];\n\n        db.toys.importFromCSV(toys).then(function(newRecordIds){\n          //newRecordIds => [10001, 10002, 10003, 10004, 10005]\n        });        \n      </code>\n    </pre></doc-section><doc-section><doc-header id=\"settings\">Settings</doc-header><doc-caption>Initialize your client using these settings.</doc-caption><p>When initializing a client, base-js takes an object of predefined settings to help enhance its capabilities. Below are the properties available:</p><table class=\"table striped bordered\"><thead><th>Parameter</th><th>Value</th><th>Required</th></thead><tbody><tr><td>async</td><td>\'callback\' | \'promise\' | \'false\'</td><td>yes</td></tr><tr><td>token</td><td>Application token string.</td><td>yes, if the application requires application tokens.</td></tr><tr><td>database id</td><td>QuickBase database ID</td><td>yes</td></tr><tr><td>tables</td><td>Object of table ids and field ids</td><td>yes</td></tr><tr><td>ticket</td><td>Valid authentication ticket.</td><td>no</td></tr><tr><td>username</td><td>Valid quickbase username.</td><td>no</td></tr><tr><td>password</td><td>Valid quickbase password.</td><td>no</td></tr><tr><td>ticket</td><td>Valid authentication ticket.</td><td>no</td></tr><tr><td>realm</td><td>Quickbase realm.</td><td>no</td></tr></tbody></table><doc-header id=\"tables\" class=\"secondary\">Tables</doc-header><doc-caption>Control your tables with predefined table names, field names and id\'s.</doc-caption><p>The tables parameter is an important setting required by base-js. This parameter is an object of all the tables that will be used in your application. This includes the table name, table id\'s, field name and field id\'s.</p><pre>\n      <code class=\"language-javascript\">\n        const tables = {\n          toys: {\n            dbid: \"bjbsgxy3t\",\n            rid: 3,\n            name: 6,\n            type: 8,\n            description: 9,\n            voicedBy: 10,\n            primary: 11\n          },\n\n          locations: {\n            dbid: \"bjbsgxy83\",\n            rid: 3,\n            name: 6,\n            address: 7\n          }\n        };\n      </code>\n    </pre><doc-notice>Table names and field names can be named whatever you like. No need to match anything in QuickBase. These names will be used throughout the life of your project including request and response data.</doc-notice><doc-header id=\"async-options\" class=\"secondary\">Async Options</doc-header><doc-caption>Promises, callbacks or synchronous http requests</doc-caption><p>When you execute something synchronously, you wait for it to finish before moving on to another task. When you execute something asynchronously, you can move on to another task before it finishes. Below are the different values available for the async setting parameter:</p><p>The \'promise\' and \'callback\' setting tell the library to make all http requests asynchronously. \'false\' will execute all API requests synchronously.</p><table class=\"table bordered striped\"><thead><th>Value</th><th>Description</th></thead><tbody><tr><td>promise</td><td></td></tr><tr><td>callback</td><td></td></tr><tr><td>false</td><td></td></tr></tbody></table><doc-best-practice>Using promises should be your #1 option. Callbacks #2. Synchronous is #3 but discourged and will most likely be deprecated in future versions.</doc-best-practice></doc-section><doc-section><doc-header id=\"common-functions\">Common Functions</doc-header><p>The majority of API calls in the QuickBase API are covered by base-js but some API calls are much more utilized than others. Below are the list of the most common functions:</p><doc-header id=\"do-query\" class=\"secondary\">doQuery</doc-header><doc-caption>Used to retrieve records from a table.</doc-caption><a href=\"https://www.quickbase.com/api-guide/index.html#do_query.html\" target=\"_blank\">API_DoQuery</a><h5>Request</h5><table class=\"table striped bordered\"><thead><th>Parameter</th><th>Type</th><th>Value</th><th>Required</th></thead><tbody><tr><td>query</td><td>object | array</td><td>Valid query filter</td><td>yes</td></tr><tr><td>options</td><td>object</td><td><a href=\"http://www.quickbase.com/api-guide/index.html#do_query.html#Request_Parameters\" target=\"_blank\">API</a></td><td>yes, if no options use {}</td></tr></tbody></table><h5>Response</h5><table class=\"table bordered striped\"><thead><th>Response</th><th>Type</th><th>Value</th></thead><tbody><tr><td>records matched</td><td>array of objects</td><td>object\'s contains all table fields(key) and record values(value) set in configuration or clist</td></tr></tbody></table><h5>Example</h5><pre>\n      <code class=\"language-javascript\">\n        db.characters.doQuery({ firstName: \"Walter\" }, { slist: \"6\" }).then(function(characters){\n          console.log(characters);\n\n          //\n          [\n            { rid: \"3\", firstName: \"Walter\", lastName: \"White\" }, \n            { rid: \"3\", firstName: \"Jesse\", lastName: \"Pinkman\"}\n          ]  \n        });\n      </code>\n    </pre><doc-header id=\"add-record\" class=\"secondary\">addRecord</doc-header><doc-caption>Used to add a single record to a table.</doc-caption><a href=\"https://www.quickbase.com/api-guide/index.html#add_record.html\" target=\"_blank\">API_AddRecord</a><h5>Request</h5><table class=\"table striped bordered\"><thead><th>Parameter</th><th>Type</th><th>Value</th><th>Required</th></thead><tbody><tr><td>record</td><td>object</td><td>object of field-values</td><td>yes</td></tr></tbody></table><h5>Response</h5><table class=\"table bordered striped\"><thead><th>Response</th><th>Type</th><th>Value</th></thead><tbody><tr><td>record id</td><td>int</td><td>auto-generated record id</td></tr></tbody></table><h5>Example</h5><pre>\n      <code class=\"language-javascript\">\n        db.characters.addRecord({ firstName: \"Walter\", lastName: \'White\' }).then(function(newCharacterId){\n          //10001\n        });\n      </code>\n    </pre><doc-header id=\"delete-record\" class=\"secondary\">deleteRecord</doc-header><doc-caption>Used to delete a single record from a table.</doc-caption><a href=\"https://www.quickbase.com/api-guide/index.html#delete_record.html\" target=\"_blank\">API_DeleteRecord</a><h5>Request</h5><table class=\"table striped bordered\"><thead><th>Parameter</th><th>Type</th><th>Value</th><th>Required</th></thead><tbody><tr><td>record id</td><td>string | int</td><td>Existing record id</td><td>yes</td></tr></tbody></table><h5>Response</h5><table class=\"table bordered striped\"><thead><th>Response</th><th>Type</th><th>Value</th><th>Example</th></thead><tbody><tr><td>success or failure</td><td>boolean</td><td>true if record was successfully deleted, false if the record was not deleted.</td><td>10001</td></tr></tbody></table><h5>Example</h5><pre>\n      <code class=\"language-javascript\">\n        db.characters.deleteRecord(10001).then(function(success){\n          //true\n        });\n      </code>\n    </pre><doc-header id=\"import-from-csv\" class=\"secondary\">importFromCSV</doc-header><doc-caption>Used to add a collection of records to a table.</doc-caption><a href=\"https://www.quickbase.com/api-guide/index.html#import-from-csv.html\" target=\"_blank\">API_ImportFromCSV</a><h5>Request</h5><table class=\"table striped bordered\"><thead><th>Parameter</th><th>Type</th><th>Value</th><th>Required</th></thead><tbody><tr><td>array of records</td><td>array</td><td>objects of field-values</td><td>yes</td></tr></tbody></table><h5>Response</h5><table class=\"table bordered striped\"><thead><th>Response</th><th>Type</th><th>Value</th></thead><tbody><tr><td>array of new records id\'s</td><td>array</td><td>record id\'s</td></tr></tbody></table><h5>Example</h5><pre>\n      <code class=\"language-javascript\">\n        let characters = [{ firstName: \'Walter\', lastName: \'White\' }, { firstName: \'Jesse\', lastName: \'Pinkman\'}];\n\n        db.characters.importFromCSV(characters).then(function(characters){\n          //[10001, 10002]\n        });\n      </code>\n    </pre><doc-best-practice>If adding a collection of records, use importFromCSV instead of addRecord. importFromCSV is way, way, faster.</doc-best-practice></doc-section><doc-section><doc-header id=\"querying\">Querying</doc-header><p>Query filters specify the conditions that determine which records to select for read, update, and delete operations.</p><p>A query filter is an object that includes field-value conditions and its corresponding query comparison operator.</p><p>{ field: value } or { field : { XEX: value } }</p><doc-header id=\"comparison-operators\" class=\"secondary\">Comparison Operators</doc-header><p>All QuickBase API query comparison operators are allowed. A full list can be found <a href=\"https://www.quickbase.com/api-guide/index.html#do_query.html#queryOperators\" target=\"_blank\">here.</a></p><doc-notice>By default a simple { field : value } will be treated as an equals operator(\"EX\").</doc-notice><p>Common comparison operators include:</p><table class=\"table striped bordered\"><thead><th>Operator</th><th>Detail</th><th>Example</th></thead><tbody><tr><td>EX</td><td>is equal to value</td><td>{ name: \"Walter White\" }</td></tr><tr><td>XEX</td><td>is not equal to value</td><td>{ name: { XEX: \"Walter White\" } }</td></tr><tr><td>CT</td><td>contains value</td><td>{ name: { CT: \"White\" } }</td></tr><tr><td>XCT</td><td>does not contain value</td><td>{ name: { XCT: \"White\" } }</td></tr><tr><td>OBF</td><td>on or before value</td><td>{ birthday: { OBF: \"01-01-1990\" } }</td></tr><tr><td>OAF</td><td>on or after value</td><td>{ birthday: { OAF: \"01-01-1990\" } }</td></tr><tr><td>LT</td><td>less than value</td><td>{ dollars_in_bank: { LT: 10000 } }</td></tr><tr><td>GT</td><td>greater than value</td><td>{ dollars_in_bank: { GT: 10000 } }</td></tr></tbody></table><doc-header id=\"query-helpers\" class=\"secondary\">Finder Methods</doc-header><doc-caption>Finder methods are used the same way as doQuery except they have a specialized purpose</doc-caption><table><thead><th>Function</th><th>Purpose</th><th>Parameters</th><th>Response</th></thead><tbody><tr><td>doQueryCount</td><td>Find the number of records matching query filter</td><td>query</td><td>number of records(int)</td></tr><tr><td>find</td><td>retrieve a single record</td><td>record id</td><td>single record(object)</td></tr><tr><td>first</td><td>retrieve the first match</td><td>query, options</td><td>single record(object)</td></tr><tr><td>last</td><td>retrieve the last match</td><td>query, options</td><td>single record(object)</td></tr><tr><td>all</td><td>retrieve all records in table</td><td>options</td><td>records(array of objects)</td></tr></tbody></table></doc-section><doc-section><doc-header id=\"base-helpers\">BaseHelpers</doc-header><p>BaseHelpers is an additional light-weight object with commonly used functions that is bundled with base-js. It is automatically included when base-js is loaded.</p><table class=\"table striped bordered\"><thead></thead><tbody><tr><td>setCookie</td></tr><tr><td>getCookie</td></tr><tr><td>inverseTables</td></tr><tr><td>getUrlParam</td></tr><tr><td>formatDateElement</td></tr><tr><td>dateToString</td></tr><tr><td>dateTimeToString</td></tr><tr><td>durationToString</td></tr><tr><td>timeOfDayToString</td></tr><tr><td>redirectToEditForm</td></tr><tr><td>redirectToViewForm</td></tr><tr><td>downloadFile</td></tr></tbody></table><doc-notice>BaseHelpers is bundled and automatically loaded with base-js. There is no additional requiring to access these functions.</doc-notice></doc-section><doc-section><doc-header id=\"deployment\" nav-text=\"Deployment\">Deployment</doc-header><p>base-js is hosted on Amazon S3. When deploying a new version, a new Amazon S3 folder and file will be generated and a new CDN url will be automatically generated.</p><p>To deploy a new version, run \"gulp deploy\". The \'./src/base.js\' version will be compiled and stored in \"./dist/x.y.z/base.min.js\" and automatically uploaded to Amazon S3.</p><doc-best-practice>Always deploy a new version no matter how small the patch.</doc-best-practice><doc-warning>Deploying changes to an existing version will overwrite the existing Amazon S3 file.</doc-warning></doc-section><doc-section><doc-header id=\"change-log\">Change Log</doc-header><p>base-js uses semantic-versioning in the format of x.y.z(Major.Minor.Patch)</p><ul><li>x stands for a major version</li><li>y stands for a minor version</li><li>z stands for a patch</li></ul><p>Versions:</p><table class=\"table bordered striped\"><thead><th>Version</th><th>Description</th><th>Deployment Date</th></thead><tr><td>4.9.0</td><td>QuickBase API call error management.</td><td>07/01/2016</td></tr><tr><td>4.8.2</td><td>Local development proxy url updated.</td><td>06/01/2016</td></tr><tr><td>4.8.1</td><td>Return json errors.</td><td>05/01/2016</td></tr><tr><td>4.8.0</td><td>Added QuickStart portal functionality.</td><td>04/01/2016</td></tr></table></doc-section></section>");
$templateCache.put("docs/base-js/introduction.section.html","<doc-section><doc-header id=\"introduction\">Introduction</doc-header><doc-caption><p><b>base-js</b> is a JavaScript library built for the QuickBase API.</p></doc-caption><p>base-js includes functions for all common QuickBase API calls.</p></doc-section>");
$templateCache.put("docs/base-js/quickstart.section.html","<doc-section><doc-header id=\"quickstart\">Quickstart</doc-header><p>Utilizing base-js first requires a useable QuickBase application. Once you have an application, you will need to collect the database and table settings. base-js bootstraps these configurations to create a more-powerful, more object-oriented design.</p><p>Please the exact configuration needed please see below @ <a href=\"#settings\">Settings</a></p><pre>\n    <code class=\"language-javascript\">\n      const config = {\n        token: \"cgfsmfcdc5vyp5k5s7h6b6v3m9v\", //apptoken\n        async: \"promise\",\n        databaseId: \"bjbsgxy2r\", //main application dbid\n        tables: {\n          toys: {\n            dbid: \"bjbsgxy3t\", //table id\n            rid: 3, //field id\n            name: 6,\n            type: 8,\n            description: 9,\n            voicedBy: 10,\n            primary: 11\n          }\n        }\n      };\n\n      const db = new Base(config);\n\n      //retrieve all primary toy records\n      db.toys.doQuery({ primary: \"1\" }, { slist: [6,9] }).then(function(toys){\n        /*\n          toys => [\n            { name: \"Buzz Lightyear\", description: \"Space-ranger action figure who wears a space suit.\" },\n            { name: \"Woody\", description: \"Cowbody doll, Andy\'s favorite.\" },\n            { name: \"Jesse\", description: \"Cowgirl doll and part of the Woody\'s Round Up gang.\" }\n          ]\n        */\n      });\n\n      //add new toy record\n      let toy = { \n        name: \"Hamm\", \n        description: \"Wisecracking realist piggy bank.\", \n        voicedBy: \"John Ratzenberger\" \n      };\n\n      db.toys.addRecord(toy).then(function(newRecordId){\n        //newRecordId => 10001\n      });\n\n      //delete toy record\n      db.toys.delete(10001).then(function(deleted){\n        //deleted => true\n      });        \n\n      //import collection of toys\n      let toys = [\n        { name: \"Rex\", description: \"Excitable large, green, plastic Tyrannosaurus rex.\", voicedBy: \"Wallace Shawn\" },\n        { name: \"Slinky Dog\", description: \"Dachshund w/ slinky for body, speaks with a southern accent.\", voicedBy: \"Jim Varney\" },\n        { name: \"Mr. Potato Head\", description: \"Doll based on the real-life toy by Playskool.\", voicedBy: \"Don Rickles.\" },\n        { name: \"Bullseye\", description: \"Woody\'s horse that acts like a dog.\", voicedBy: \"\" },\n        { name: \"Bo Peep\", description: \"Porcelain figurine attached to Molly\'s bedside lamp.\", voicedBy: \"Annie Potts\" },\n      ];\n\n      db.toys.importFromCSV(toys).then(function(newRecordIds){\n        //newRecordIds => [10001, 10002, 10003, 10004, 10005]\n      });        \n    </code>\n  </pre></doc-section>");
$templateCache.put("docs/project-docs/index.doc.html","<section><doc-section><doc-header id=\"introduction\">Introduction</doc-header><doc-caption><p><b>project-docs</b> is a platform to develop and store documentation for common libraries, projects and tools.</p></doc-caption><p>project-docs provides a standard UI to improve ease of use and readability, tools to shorten the documentation process and help develop documentation standards.</p><p>All documentation is written in common HTML & SASS, no new rules or markdown to learn.</p><p>Functionality includes helper tags, responsive CSS framework, automatic side-navigation and syntax highlighted code examples.</p></doc-section><doc-section><doc-header id=\"projects\">Projects</doc-header><p>All project documentation is stored within project-docs. Project documentation files are located in the docs folder.</p><h4>Documented Projects</h4><table class=\"table bordered striped\"><tbody><tr><td><a href=\"/base-js\">base-js</a></td><td>JavaScript library for the QuickBase API</td></tr><tr><td><a href=\"/quickstart\">quickstart</a></td><td>Angular template application to jumpstart projects</td></tr></tbody></table></doc-section><doc-section><doc-header id=\"new-project\">Document New Project</doc-header><doc-caption>Documenting a new project is easy.</doc-caption><h5>Steps to document a new project</h5><ol><li>Add a new html file for your project to the docs folder.</li><li>Add the name of the new document to the \"_docs.js\" file.</li><li>Add the new project to the project-docs list of current projects(\"project-docs.doc.html\")</li></ol></doc-section><doc-section><doc-header id=\"doc-style-guide\">Doc Style Guide</doc-header><p>All documentation is written in common html. No new markdown language or a long list of rules. Be sure to take advantage of the responsive CSS framework included(<a target=\"_blank\" href=\"http://materializecss.com/\">Materialize</a>).</p><doc-header id=\"style-guide\" class=\"secondary\">Style Guide</doc-header><p>To create documentation that is consistent and easy-to-follow across projects, here is a general guide to structure your documents.</p><table class=\"table bordered striped\"><thead></thead><tbody><tr><td>Sections</td><td>Wrap sections of content in a \'doc-section\' tag.</td></tr><tr><td>Headings</td><td>Use \'doc-header\' for headings that belong in the side nav.</td></tr><tr><td>Content</td><td>Use \'p\' tags to store text.</td></tr><tr><td>Other Headings</td><td>Use \'h3\'(primary), \'h4\'(secondary), \'h5\' tags.</td></tr><tr><td>Tables</td><td>Use tables to store collections. Use \'table\', \'striped\' and \'bordered\' classes on table tag.</td></tr><tr><td>Notices</td><td>Use the \'doc-notice\', \'doc-warning\' or \'doc-best-practice\' to bring attention to a useful piece of information.</td></tr></tbody></table><doc-header id=\"helper-tags\" class=\"secondary\">Helper Tags</doc-header><p>Helper tags help speed up the process of writing the HTML by packing up the common parts of a document.</p><table class=\"table bordered striped\"><tbody><tr><td>doc-section</td><td>Adding class to headers will add heading to side-navigation.</td></tr><tr><td>doc-header</td><td></td></tr><tr><td>doc-code</td><td>Adding class to headers will add heading as indented header to side-navigation.</td></tr><tr><td>doc-notice</td><td>Adding class to headers will add heading as indented header to side-navigation.</td></tr><tr><td>doc-alert</td><td>Adding class to headers will add heading as indented header to side-navigation.</td></tr><tr><td>doc-best-practice</td><td>Adding class to headers will add heading as indented header to side-navigation.</td></tr><tr><td>doc-caption</td><td>Adding class to headers will add heading as indented header to side-navigation.</td></tr></tbody></table><doc-notice>These tags are optional. You can use any HTML tag you wish but these tags pack a punch.</doc-notice><doc-header id=\"classes\" class=\"secondary\" it=\"has\">Classes</doc-header><p>These classes apply common styling or bind functionality to your elements as usual.</p><p></p><table class=\"table bordered striped\"><tbody><tr><td>secondary</td><td>Add this class to \'doc-header\' to have header display as a subheader in the navigation pane.</td></tr></tbody></table></doc-section><doc-section><doc-header id=\"side-navigation\">Side-Navigation</doc-header><doc-caption>The side-navigation is automatically rendered.</doc-caption><p>To add a header to the side-navigation, add a <b>\'doc-header\'</b> tag to your document. The side-navigation will be rendered in the order the headers appear in your document. Adding the class, \"secondary\", will make the header display as a sub-header under the closest primary doc header.</p><doc-notice>Ensure to add an \'id\' attr to your headers and subheaders to create an anchor.</doc-notice><doc-warning>Place the headers and subheaders in order. It doesn\'t make sense to put a subheader before a header or have a subheader without a header.</doc-warning></doc-section><doc-section><doc-header id=\"deployment\">Deployment</doc-header><p>Just push to git. Application is hosted using Github pages.</p></doc-section></section>");
$templateCache.put("docs/quickstart/index.doc.html","<h4>in progress...</h4>");
$templateCache.put("shared/doc-elements/best-practice.component.html","<div class=\"doc-notice row notice\"><div class=\"card-panel green lighten-1 white-text\"><b>Best Practice</b>:&nbsp;<ng-transclude></ng-transclude></div></div>");
$templateCache.put("shared/doc-elements/caption.component.html","<div class=\"doc-caption\"><ng-transclude></ng-transclude></div>");
$templateCache.put("shared/doc-elements/header.component.html","<h3 class=\"doc-header primary\" ng-if=\"$ctrl.nav.tier==\'primary-nav\'\" ng-transclude></h3><h4 class=\"doc-header secondary\" ng-if=\"$ctrl.nav.tier==\'secondary-nav\'\" ng-transclude></h4>");
$templateCache.put("shared/doc-elements/notice.component.html","<div class=\"doc-notice row notice\"><div class=\"card-panel blue lighten-1 white-text\"><b>Notice</b>:&nbsp;<ng-transclude></ng-transclude></div></div>");
$templateCache.put("shared/doc-elements/section.component.html","<section class=\"doc-section z-depth-1\"><div class=\"row\"><div class=\"col l12 m12 s12\"><ng-transclude></ng-transclude></div></div></section>");
$templateCache.put("shared/doc-elements/warning.component.html","<div class=\"doc-notice row notice\"><div class=\"card-panel red lighten-1 white-text\"><b>Warning</b>:&nbsp;<ng-transclude></ng-transclude></div></div>");
$templateCache.put("side-nav/side-nav-item/side-nav-items.component.html","<li id=\"{{ $ctrl.data.anchor }}-nav\" ng-class=\"[$ctrl.data.status, $ctrl.data.tier]\" ng-show=\"$ctrl.data.display\"><a href=\"#{{ $ctrl.data.anchor | lowercase }}\"><span ng-if=\"$ctrl.data.tier==\'secondary-nav\'\">-</span> {{ $ctrl.data.text | uppercase }}</a></li>");}]);